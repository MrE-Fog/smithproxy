#include <gtest/gtest.h>

#include <ext/hpack/hpack.hpp>


TEST(HPack, RootCurl_Request) {

    const uint8_t data[] = {
            0x82, 0x41, 0x89, 0xf1, 0xe3, 0xc2, 0xf6, 0x1c, 0xe9, 0x5c, 0x9e, 0xff, 0x87, 0x84, 0x40, 0x92,
            0xb6, 0xb9, 0xac, 0x1c, 0x85, 0x58, 0xd5, 0x20, 0xa4, 0xb6, 0xc2, 0xad, 0x61, 0x7b, 0x5a, 0x54,
            0x25, 0x1f, 0x01, 0x31, 0x7a, 0xd1, 0xd0, 0x7f, 0x66, 0xa2, 0x81, 0xb0, 0xda, 0xe0, 0x53, 0xfa,
            0xfc, 0x08, 0x7e, 0xd4, 0xce, 0x6a, 0xad, 0xf2, 0xa7, 0x97, 0x9c, 0x89, 0xc6, 0xbf, 0xb5, 0x21,
            0xae, 0xba, 0x0b, 0xc8, 0xb1, 0xe6, 0x32, 0x58, 0x6d, 0x97, 0x57, 0x65, 0xc5, 0x3f, 0xac, 0xd8,
            0xf7, 0xe8, 0xcf, 0xf4, 0xa5, 0x06, 0xea, 0x55, 0x31, 0x14, 0x9d, 0x4f, 0xfd, 0xa9, 0x7a, 0x7b,
            0x0f, 0x49, 0x58, 0x7d, 0xe5, 0xc0, 0xbb, 0x4e, 0xb6, 0xf2, 0xef, 0x3a, 0xa6, 0xe1, 0xca, 0x3b,
            0x0c, 0xc3, 0x6c, 0xba, 0xbb, 0x2e, 0x7f, 0x53, 0xe5, 0x49, 0x7c, 0xa5, 0x89, 0xd3, 0x4d, 0x1f,
            0x43, 0xae, 0xba, 0x0c, 0x41, 0xa4, 0xc7, 0xa9, 0x8f, 0x33, 0xa6, 0x9a, 0x3f, 0xdf, 0x9a, 0x68,
            0xfa, 0x1d, 0x75, 0xd0, 0x62, 0x0d, 0x26, 0x3d, 0x4c, 0x79, 0xa6, 0x8f, 0xbe, 0xd0, 0x01, 0x77,
            0xfe, 0x8d, 0x48, 0xe6, 0x2b, 0x03, 0xee, 0x69, 0x7e, 0x8d, 0x48, 0xe6, 0x2b, 0x1e, 0x0b, 0x1d,
            0x7f, 0x46, 0xa4, 0x73, 0x15, 0x81, 0xd7, 0x54, 0xdf, 0x5f, 0x2c, 0x7c, 0xfd, 0xf6, 0x80, 0x0b,
            0xbd, 0xf4, 0x3a, 0xeb, 0xa0, 0xc4, 0x1a, 0x4c, 0x7a, 0x98, 0x41, 0xa6, 0xa8, 0xb2, 0x2c, 0x5f,
            0x24, 0x9c, 0x75, 0x4c, 0x5f, 0xbe, 0xf0, 0x46, 0xcf, 0xdf, 0x68, 0x00, 0xbb, 0xff, 0x40, 0x85,
            0x41, 0x48, 0xb4, 0xd5, 0x93, 0x01, 0x31, 0x40, 0x8a, 0x41, 0x48, 0xb4, 0xa5, 0x49, 0x27, 0x59,
            0x06, 0x49, 0x7f, 0x87, 0x25, 0x87, 0x42, 0x16, 0x41, 0x92, 0x5f, 0x40, 0x8a, 0x41, 0x48, 0xb4,
            0xa5, 0x49, 0x27, 0x5a, 0x93, 0xc8, 0x5f, 0x86, 0xa8, 0x7d, 0xcd, 0x30, 0xd2, 0x5f, 0x40, 0x8a,
            0x41, 0x48, 0xb4, 0xa5, 0x49, 0x27, 0x5a, 0xd4, 0x16, 0xcf, 0x02, 0x3f, 0x31, 0x40, 0x8a, 0x41,
            0x48, 0xb4, 0xa5, 0x49, 0x27, 0x5a, 0x42, 0xa1, 0x3f, 0x86, 0x90, 0xe4, 0xb6, 0x92, 0xd4, 0x9f,
            0x50, 0x8d, 0x9b, 0xd9, 0xab, 0xfa, 0x52, 0x42, 0xcb, 0x40, 0xd2, 0x5f, 0xa5, 0x23, 0xb3, 0x51,
            0x8b, 0x2d, 0x4b, 0x70, 0xdd, 0xf4, 0x5a, 0xbe, 0xfb, 0x40, 0x05, 0xdf, 0x60, 0xa1, 0x87, 0x45,
            0xee, 0x3b, 0xa2, 0x15, 0xe1, 0x36, 0xdb, 0x6f, 0xb2, 0xdd, 0xe7, 0x5f, 0xc1, 0x75, 0xb7, 0xc1,
            0x0b, 0x4f, 0xb7, 0x81, 0xf0, 0x2a, 0xd0, 0x21, 0x90, 0xf1, 0x97, 0x55, 0x93, 0x40, 0x1f, 0x60,
            0xa1, 0x87, 0x45, 0xee, 0x3b, 0xa2, 0x13, 0x57, 0x5e, 0x10, 0x2e, 0xb2, 0xdb, 0x2d, 0xbb, 0x76,
            0xf8, 0x70, 0x02, 0x16, 0x9f, 0x05, 0xf6, 0x9b, 0x55, 0xa0, 0x43, 0x21, 0xe3, 0x2e, 0xab, 0x26,
            0x80, 0x3f, 0x60, 0x9a, 0x31, 0xaa, 0x94, 0xeb, 0x20, 0xd2, 0x41, 0x59, 0x9d, 0x92, 0x74, 0x92,
            0x6a, 0x9d, 0x96, 0x84, 0x89, 0xee, 0xf2, 0x55, 0x1a, 0x1e, 0x09, 0x9f, 0x13, 0x3f, 0x60, 0x89,
            0x9c, 0x68, 0xe4, 0x58, 0xf0, 0x9e, 0xa4, 0xc0, 0x1f, 0x60, 0xf7, 0xdd, 0xa3, 0x0d, 0xe3, 0x9f,
            0xa9, 0x8a, 0xfb, 0x6e, 0x40, 0x35, 0x59, 0x85, 0xa5, 0x59, 0x85, 0x57, 0x6e, 0x99, 0x56, 0x61,
            0x02, 0xac, 0xdd, 0x42, 0xac, 0xc2, 0xd2, 0xac, 0xc2, 0xa8, 0x84, 0x27, 0xd9, 0x65, 0x51, 0x09,
            0x56, 0x6e, 0x99, 0x56, 0x61, 0x0a, 0xac, 0xdd, 0x42, 0xac, 0xc2, 0xd0, 0x15, 0x66, 0x15, 0x44,
            0x26, 0xa4, 0x70, 0xb1, 0xb6, 0x26, 0x9e, 0x64, 0x32, 0x39, 0x20, 0x5c, 0x01, 0x59, 0x64, 0x8e,
            0x14, 0x65, 0x71, 0xc7, 0x19, 0x01, 0x64, 0x91, 0xa2, 0x3e, 0x01, 0x0e, 0x45, 0x44, 0x25, 0x59,
            0xba, 0x65, 0x59, 0x84, 0x4a, 0xb3, 0x74, 0xca, 0xb3, 0x08, 0x5c, 0x69, 0xc7, 0xde, 0x03, 0x6d,
            0x38, 0xab, 0x37, 0x4c, 0xab, 0x30, 0xb2, 0xab, 0x37, 0x4c, 0xab, 0x30, 0x89, 0x56, 0x6e, 0xaa,
            0xed, 0xff, 0x60, 0x98, 0x18, 0xe9, 0x89, 0x32, 0x44, 0x4a, 0xcb, 0xe6, 0x2a, 0x8a, 0x9f, 0x07,
            0xb3, 0xac, 0x01, 0x71, 0xa6, 0xc4, 0x06, 0xdf, 0x74, 0x4e, 0x81, 0xcf, 0x60, 0x90, 0x18, 0xe9,
            0x8a, 0x81, 0xa1, 0x30, 0x05, 0xc6, 0x9b, 0x10, 0x1b, 0x7d, 0xd1, 0x3a, 0x07, 0x3f, 0x60, 0xfe,
            0x87, 0x45, 0xee, 0x31, 0x0a, 0xf0, 0x9b, 0x6d, 0xb7, 0xd9, 0x6e, 0xf3, 0xaf, 0xe0, 0xba, 0xdb,
            0xe0, 0x85, 0xa7, 0xdb, 0xc0, 0xf8, 0x15, 0x68, 0x10, 0xc8, 0x78, 0xcb, 0xaa, 0xc9, 0xa0, 0x58,
            0x21, 0x13, 0x41, 0x03, 0x8e, 0x3c, 0x05, 0x5d, 0xbd, 0xa2, 0xf6, 0x4b, 0xfb, 0xf7, 0x2a, 0xed,
            0xe0, 0xbe, 0x06, 0x82, 0xab, 0xb7, 0xb4, 0x5e, 0xd1, 0x92, 0xfa, 0xae, 0xde, 0x6d, 0xf7, 0x82,
            0xe3, 0xa0, 0x6d, 0x96, 0x9b, 0x13, 0x2e, 0x36, 0xf8, 0x1d, 0x71, 0xb7, 0x9a, 0x74, 0x02, 0x6c,
            0x2f, 0x32, 0xe0, 0x9d, 0x79, 0xf6, 0x40, 0xf8, 0x15, 0x76, 0xf6, 0x8b, 0xda, 0xb5, 0xef, 0xd5,
            0xc3, 0x7a, 0xc1, 0x71, 0xa6, 0xc4, 0x16, 0x42, 0xe8, 0x90, 0xab, 0xb7, 0xb4, 0xea, 0xd3, 0x81,
            0x57, 0x6f, 0x77, 0xe2, 0x5b, 0x10, 0x63, 0xd4, 0xab, 0xb7, 0x9b, 0x5c, 0x4b, 0x83, 0x60, 0xfd,
            0x87, 0x45, 0xee, 0x31, 0x09, 0xab, 0xaf, 0x08, 0x17, 0x59, 0x6d, 0x96, 0xdd, 0xbb, 0x7c, 0x38,
            0x01, 0x0b, 0x4f, 0x82, 0xfb, 0x4d, 0xaa, 0xd0, 0x21, 0x90, 0xf1, 0x97, 0x55, 0x93, 0x40, 0xb0,
            0x42, 0x26, 0x82, 0x07, 0x1c, 0x78, 0x0a, 0xbb, 0x7b, 0x45, 0xec, 0x97, 0xf7, 0xee, 0x55, 0xdb,
            0xc1, 0x7c, 0x0d, 0x32, 0xab, 0xb7, 0xb4, 0x5e, 0xd1, 0x92, 0xfa, 0xae, 0xde, 0x00, 0x99, 0x64,
            0x2d, 0x04, 0x4c, 0xbc, 0x26, 0x84, 0xf0, 0x82, 0xe3, 0x2c, 0xba, 0x06, 0x5d, 0x00, 0x59, 0x08,
            0x5b, 0x70, 0x2e, 0x84, 0x2d, 0x89, 0xb7, 0x95, 0x76, 0xf6, 0x8b, 0xda, 0xb5, 0xef, 0xd5, 0xc3,
            0x7a, 0xc1, 0x71, 0xa6, 0xc4, 0xcb, 0xcf, 0xbe, 0x04, 0x2a, 0xed, 0xed, 0x3a, 0xb4, 0xe0, 0x55,
            0xdb, 0xdd, 0xf8, 0x96, 0xc4, 0x18, 0xf5, 0x2a, 0xed, 0xe6, 0xd7, 0x12, 0xe0, 0x40, 0x03, 0x64,
            0x6e, 0x74, 0x01, 0x31
    };

    std::size_t data_sz = 868;


    HPACK::decoder_t dec;

    auto data_string = std::string_view((const char*)data, data_sz);
    auto vec = std::vector<uint8_t>(data_string.begin(), data_string.end());

    if (dec.decode(vec)) {
        for (auto& [ hdr, vlist ] : dec.headers()) {

            for(auto const& hdr_elem: vlist)
                std::cout << "Frame: header/" << hdr << ": " << hdr_elem << "\n";
        }
    } else {
        std::cout << "Frame: hpack decode error";
    }
}

TEST(HPack, RootCurl_Resp) {

    const uint8_t data[] = {
            0x20, 0x88, 0x76, 0x89, 0xaa, 0x63, 0x55, 0xe5, 0x80, 0xae, 0x16, 0x97, 0x17, 0x61, 0x96, 0xdc,
            0x34, 0xfd, 0x28, 0x17, 0xd4, 0xc2, 0x58, 0xd4, 0x10, 0x04, 0x25, 0x02, 0x0b, 0x81, 0x76, 0xe3,
            0x4d, 0xa9, 0x8b, 0x46, 0xff, 0x5f, 0x92, 0x49, 0x7c, 0xa5, 0x89, 0xd3, 0x4d, 0x1f, 0x6a, 0x12,
            0x71, 0xd8, 0x82, 0xa6, 0x0e, 0x1b, 0xf0, 0xac, 0xf7, 0x5c, 0x05, 0x33, 0x34, 0x39, 0x39, 0x34,
            0x00, 0x91, 0x42, 0x6c, 0x31, 0x12, 0xb2, 0x6c, 0x1d, 0x48, 0xac, 0xf6, 0x25, 0x64, 0x14, 0x96,
            0xd8, 0x64, 0xfa, 0xa0, 0xa4, 0x7e, 0x56, 0x1c, 0xc5, 0x81, 0xc6, 0x40, 0xe8, 0x80, 0x00, 0x7d,
            0xa8, 0x6a, 0x89, 0x45, 0xb2, 0x17, 0x75, 0xb1, 0xdf, 0x3d, 0x23, 0x35, 0x48, 0xfb, 0x52, 0xbb,
            0x0b, 0x41, 0xc7, 0x27, 0x00, 0x91, 0xf2, 0xb5, 0x45, 0x4f, 0x83, 0xd9, 0xd6, 0x91, 0xd4, 0x39,
            0x8b, 0x62, 0xc8, 0x48, 0xd3, 0x6a, 0x3f, 0x85, 0x3d, 0x54, 0x1a, 0xa2, 0xff, 0x00, 0x87, 0x41,
            0x52, 0xb1, 0x0e, 0x7e, 0xa6, 0x2f, 0xe2, 0x31, 0xaa, 0x94, 0xeb, 0x20, 0xd2, 0x41, 0x59, 0x9d,
            0x92, 0x74, 0x92, 0x6a, 0x9d, 0x96, 0x84, 0x89, 0xee, 0xf2, 0x55, 0x1a, 0x1e, 0x09, 0x9f, 0x13,
            0x3f, 0x6a, 0x17, 0xcd, 0x66, 0xb0, 0xa8, 0x83, 0x7d, 0xa5, 0xfa, 0x50, 0x01, 0x5b, 0x40, 0xec,
            0x58, 0x40, 0x10, 0x94, 0x08, 0x2e, 0x05, 0xdb, 0x8d, 0x36, 0xa6, 0x2d, 0x1b, 0xfe, 0xd4, 0xd0,
            0x3f, 0x2b, 0x43, 0x31, 0x60, 0x79, 0xc6, 0x80, 0x00, 0x7d, 0xa9, 0x58, 0xd3, 0x3c, 0x0c, 0x7d,
            0xa9, 0x21, 0xe9, 0x19, 0xaa, 0x81, 0x7b, 0x0e, 0x74, 0xae, 0x4f, 0x7f, 0x6a, 0x20, 0xa4, 0xb6,
            0xc2, 0xfd, 0xa9, 0x8d, 0x29, 0xaf, 0x55, 0x54, 0x7a, 0x00, 0x85, 0x2f, 0x9a, 0xcd, 0x61, 0x51,
            0x96, 0xdf, 0x3d, 0xbf, 0x4a, 0x05, 0xf5, 0x34, 0x9f, 0xba, 0x81, 0x7d, 0xe0, 0xa8, 0x07, 0xae,
            0x36, 0x2b, 0x80, 0x02, 0x98, 0xb4, 0x6f, 0x00, 0x89, 0x20, 0xc9, 0x39, 0x56, 0x21, 0xea, 0x4d,
            0x87, 0xa3, 0x99, 0xa8, 0xeb, 0x21, 0x27, 0xb0, 0xbf, 0x4a, 0x54, 0x75, 0x88, 0x32, 0x4e, 0x5f,
            0xa5, 0x29, 0xb5, 0x09, 0x5a, 0xc2, 0xf7, 0x1d, 0x06, 0x90, 0x69, 0x2f, 0x00, 0x85, 0xae, 0xc1,
            0xcd, 0x48, 0xff, 0x86, 0xa8, 0xeb, 0x10, 0x64, 0x9c, 0xbf, 0x00, 0x04, 0x76, 0x61, 0x72, 0x79,
            0x98, 0xfc, 0x5b, 0x69, 0x7b, 0x5a, 0x54, 0x24, 0xb2, 0x2d, 0xc8, 0xc9, 0x9f, 0xea, 0x12, 0x10,
            0xb5, 0xa5, 0x6c, 0x15, 0x10, 0xf2, 0x1a, 0xa9, 0xbf, 0x00, 0x90, 0x21, 0xea, 0x49, 0x6a, 0x4a,
            0xc8, 0x29, 0x2d, 0xb0, 0xc9, 0xf4, 0xb5, 0x67, 0xa0, 0xc4, 0xf5, 0x92, 0xb6, 0xb9, 0xac, 0x1c,
            0x85, 0x58, 0xd5, 0x20, 0xa4, 0xb6, 0xc2, 0xad, 0x61, 0x7b, 0x5a, 0x54, 0x25, 0x1f, 0x00, 0x8b,
            0x21, 0xea, 0x49, 0x6a, 0x4a, 0xc5, 0xa8, 0x87, 0x90, 0xd5, 0x4d, 0x83, 0x9b, 0xd9, 0xab, 0x00,
            0x8c, 0xf2, 0xb4, 0x63, 0x27, 0x52, 0xd5, 0x22, 0xc8, 0x2d, 0x9d, 0xcb, 0x67, 0x97, 0xf0, 0x58,
            0xc4, 0xa5, 0xf8, 0x02, 0xe0, 0x1f, 0x75, 0x95, 0x13, 0x00, 0x5c, 0x69, 0xb1, 0x38, 0xdb, 0xce,
            0x36, 0x20, 0x00, 0x01, 0x6b, 0x00, 0x8b, 0xb0, 0xb2, 0x96, 0xcb, 0x0b, 0x62, 0xd5, 0x9e, 0x83,
            0x13, 0xd7, 0x93, 0xa8, 0xeb, 0x58, 0x59, 0x4b, 0x65, 0x85, 0xb1, 0x6f, 0x13, 0x96, 0xa5, 0xa4,
            0x3f, 0x8a, 0xa6, 0xb0, 0x72, 0x17, 0x00, 0x93, 0x19, 0x08, 0x54, 0x21, 0x62, 0x1e, 0xa4, 0xd8,
            0x7a, 0x16, 0x1d, 0x14, 0x1f, 0xc2, 0xd3, 0x94, 0x72, 0x16, 0xcf, 0x01, 0x2a, 0x00, 0x8c, 0xf2,
            0xb4, 0x63, 0x27, 0x52, 0xd5, 0x22, 0xc8, 0x2d, 0x9d, 0xcb, 0x67, 0x86, 0xf0, 0x58, 0xd9, 0x5a,
            0xa2, 0xf8
    };
     std::size_t data_sz = 530;


    HPACK::decoder_t dec;

    auto data_string = std::string_view((const char*)data, data_sz);
    auto vec = std::vector<uint8_t>(data_string.begin(), data_string.end());

    if (dec.decode(vec)) {
        for (auto& [ hdr, vlist ] : dec.headers()) {

            for(auto const& hdr_elem: vlist)
                std::cout << "Frame: header/" << hdr << ": " << hdr_elem << "\n";
        }
    } else {
        std::cout << "Frame: hpack decode error";
    }
}

